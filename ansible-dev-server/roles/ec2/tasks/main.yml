---
- name: Ensure required collections are present on control node (idempotent)
  ansible.builtin.command: ansible-galaxy collection install -r collections/requirements.yml
  changed_when: false

- name: Find latest Ubuntu 24.04 LTS AMI
  amazon.aws.ec2_ami_info:
    owners: ["{{ ubuntu_owner }}"]
    filters:
      name: "{{ ubuntu_name_filter }}"
      architecture: x86_64
      root-device-type: ebs
      virtualization-type: hvm
    sort: creation_date
    sort_order: descending
    region: "{{ aws_region }}"
  register: ubuntu_ami

- name: Create or update security group
  amazon.aws.ec2_security_group:
    name: "{{ sg_name }}"
    description: "{{ security_group_desc }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ item }}"
        rule_desc: "SSH"
      {% for c in allowed_cidrs_code_server %}
      - proto: tcp
        from_port: "{{ code_server_port }}"
        to_port: "{{ code_server_port }}"
        cidr_ip: "{{ c }}"
        rule_desc: "code-server"
      {% endfor %}
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
  loop: "{{ allowed_cidrs_ssh }}"
  loop_control:
    label: "{{ item }}"

- name: Build cloud-init (user_data)
  ansible.builtin.set_fact:
    cloud_init: |
      #cloud-config
      package_update: true
      packages:
        - python3
        - python3-pip
        - python3-venv
        - git
        - make
        - unzip
        - jq
        - curl
        - rsync
        - build-essential
        - docker.io
      runcmd:
        - usermod -aG docker ubuntu
        - python3 -m pip install --upgrade pip pipx
        - pipx ensurepath || true
        - pipx install ansible-lint
        - pipx install molecule
        - python3 -m pip install --upgrade yamllint
        - python3 -m pip install --upgrade "ansible>=9"
        - su - ubuntu -c "mkdir -p ~/ansible/{collections,roles,playbooks}"
        - [ bash, -lc, "{{ 'curl -fsSL https://code-server.dev/install.sh | sh' if install_code_server|bool else 'echo skip code-server' }}" ]
        - [ bash, -lc, "{{ 'sudo systemctl enable --now code-server@ubuntu' if install_code_server|bool else 'echo skip code-server' }}" ]

- name: Launch EC2 instance
  amazon.aws.ec2_instance:
    name: "{{ name_tag }}"
    region: "{{ aws_region }}"
    key_name: "{{ key_name }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ ubuntu_ami.images[0].image_id }}"
    network:
      assign_public_ip: "{{ assign_public_ip }}"
      subnet_id: "{{ vpc_subnet_id }}"
      security_group: "{{ sg_name }}"
    tags:
      Name: "{{ name_tag }}"
      role: "ansible-dev"
    user_data: "{{ cloud_init }}"
    wait: true
  register: ec2

- name: Set host for the next play
  ansible.builtin.add_host:
    name: ansible-dev
    ansible_host: "{{ ec2.instances[0].public_ip_address | default(ec2.instances[0].private_ip_address) }}"
    ansible_user: "{{ ansible_ssh_user }}"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
  changed_when: false

- name: Show connection info
  ansible.builtin.debug:
    msg:
      - "InstanceId: {{ ec2.instances[0].instance_id }}"
      - "Host: {{ hostvars['ansible-dev'].ansible_host }}"
      - "SSH: ssh -i {{ ansible_ssh_private_key_file }} {{ ansible_ssh_user }}@{{ hostvars['ansible-dev'].ansible_host }}"
